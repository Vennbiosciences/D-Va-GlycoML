#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
###################################################################################################################
This script read epochs, cos_similarities data, and plot them.
The training files Train-Human/Cyno-N.
And use transfer learning for Train-Mouse-N-Fudan.

The testing files are from Test-Human-N-Fudan.

The batch size is 32, learning rates are 2.

Created on 05 November 2022.
###################################################################################################################
"""
__author__ = 'ZLiang'

import matplotlib.pyplot as plt
import numpy as np

# Cosine similarities for different test cases. Totally 50 scores for each test.
# These are used for the y-axis.
# The values are from the epochs of
#   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
#   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50.


test_21_train_21_mean = [0.8196279649982295, 0.8367646831169311, 0.8424615268031994, 0.8427335595305013, 0.8512560947299701,
                       0.8512215941714266, 0.8557706654579749, 0.8514670804259045, 0.8585449958538846, 0.8571689248444456,
                       0.8611243197930227, 0.8582502394944286, 0.8612215609246128, 0.8613260235668514, 0.8615322273110683,
                       0.8659155993670513, 0.8565796457862603, 0.8608261597144291, 0.8633903119471474, 0.8633829627416578,
                       0.8624823025989748, 0.8645851205325571, 0.8638573721828463, 0.8619898191041566, 0.8581162814452912,
                       0.8645226130018511, 0.8608795924755739, 0.8654800454343261, 0.8670616195902138, 0.8635958266768691,
                       0.862862043604101,  0.8646864801711105, 0.8640699971035994, 0.8651329210842517, 0.8649301243803265,
                       0.862065343828668,  0.8587265628796018, 0.8604563011242897, 0.8626385848012832, 0.860298568199861,
                       0.8621746473981697, 0.859826115571068,  0.8630186454453447, 0.859646191799816,  0.8578724244052186,
                       0.8576016262894159, 0.8595746560711564, 0.8593592868327309, 0.8594851712071105, 0.8567186757172991,
                       ]

test_21_train_21_median = [0.859312275037566,  0.87970605727646,   0.8851492484848353, 0.8861651969820671, 0.8921698666236791,
                         0.9000109419860594, 0.8955841244707975, 0.8913840506642827, 0.8994788416847274, 0.9012920535224502,
                         0.9023288917071144, 0.9031296731150981, 0.904944028244276,  0.9038137922630535, 0.9032074664043371,
                         0.9094024434688683, 0.8990940370711434, 0.9035882264173963, 0.909061951917331,  0.906300836014773,
                         0.9071067715889664, 0.9048682936004281, 0.9078162113164714, 0.9056497218759592, 0.9004149659205924,
                         0.9096654195970081, 0.9047344105837258, 0.9060281766562268, 0.9075133370056228, 0.9050755030503728,
                         0.9047517399224497, 0.9059711747214053, 0.9068881258699103, 0.9061727732067559, 0.9031383732961819,
                         0.9022667660822404, 0.8982536207910803, 0.9036132387265351, 0.9035794890004469, 0.8994580967590007,
                         0.9022251382528189, 0.8991936786624091, 0.9023586624888034, 0.8980302473207663, 0.8966399346230625,
                         0.8981581850209922, 0.8984927905595904, 0.9006768385882858, 0.8985609576800798, 0.8942369683310138,
                         ]

test_21_train_01_21_mean = [0.8836542607338397, 0.8803010466170713, 0.8757916882812029, 0.880091086945019,  0.8770503438287718,
                          0.879390122282563,  0.878916162661603,  0.877696948058799,  0.8789841322522318, 0.8778461450758094,
                          0.8770931713922657, 0.8760363843844268, 0.8770837211631772, 0.8768841453018553, 0.8746722894967157,
                          0.8729498942727794, 0.8745863478932926, 0.872500604628605,  0.8753065203762469, 0.8738755295000459,
                          0.8720597917660451, 0.8721211568530706, 0.870545011324006,  0.8708653397537468, 0.8728508531318891,
                          0.8717300653296549, 0.8687887241460933, 0.8703656460770447, 0.870830553857036,  0.870243512573549,
                          0.8696688230055999, 0.8704608698229227, 0.8700968353939891, 0.8698513579375118, 0.8700942702730634,
                          0.869357087813259,  0.867529977910688,  0.8680768515937753, 0.8669962778909209, 0.8686681140328016,
                          0.868099132730311,  0.8665727930370526, 0.8673344344448577, 0.8665617511037729, 0.8684716279940708,
                          0.8685449883450148, 0.867073312537438,  0.8669122383877618, 0.8693834044626002, 0.8668188615587702,
                          ]

test_21_train_01_21_median = [0.926901844261745,  0.9243866252860804, 0.9201922754677122, 0.9242846794932698, 0.9212906595241283,
                            0.9235078558490986, 0.9211707034925893, 0.9214545334054551, 0.921364063434129,  0.9215949421871481,
                            0.9206410886935129, 0.919179792547149,  0.9216687929091147, 0.919474945229353,  0.9190944129602385,
                            0.9171669850232353, 0.9171823504586991, 0.9169134597112583, 0.9182047640931229, 0.9178340628502624,
                            0.91502910848884,   0.915824423953201,  0.9146302356973087, 0.9150101029939399, 0.9159827536270317,
                            0.9153166838784328, 0.9124321019038761, 0.91366865894803,   0.9128983012746228, 0.9141620583017572,
                            0.9123833698260296, 0.9123652528408784, 0.9114228515460513, 0.9121313585129657, 0.9122835689940846,
                            0.9134644813426825, 0.9108152541065779, 0.9098879607457617, 0.9108327763411967, 0.9128699004740174,
                            0.9106499863759225, 0.909721862873382,  0.9089552340329946, 0.9123551810155522, 0.9123257430532516,
                            0.9104301111690412, 0.911162868963511,  0.9108108392265382, 0.9114659043638844, 0.9100258247720373,
                            ]

# The number of epochs for the training.
x = np.arange(1, 51)

# Create the size of the figure.
fig=plt.figure(num=1, figsize=(20, 10))

# Set the size of subplot and starting point, set three styles for the plot
ax=fig.add_subplot(111)
ax.plot(x, test_21_train_21_mean, "y--.", label="Mean for Test-Human-N-Fudan on Train-Mouse-N-Fudan, batch size=32, learning rate=0.0002")
ax.plot(x, test_21_train_21_median, "g:+", label="Median for Test-Human-N-Fudan on Train-Mouse-N-Fudan, batch size=32, learning rate=0.0002")

ax.plot(x, test_21_train_01_21_mean, "b--+", label="Mean for Test-Human-N-Fudan on transfer learning Train-Human/Cyno-N, batch size=32, learning rate=0.0002")
ax.plot(x, test_21_train_01_21_median, "r-x", label="Median for Test-Human-N-Fudan on transfer learning Train-Human/Cyno-N, batch size=32, learning rate=0.0002")

# Set the scales for x-axis and y-axis.
ax.set_xlim([1, 50.1])
ax.set_ylim([0.80, 0.95])

# Set the scales for the display of x-axis and y-axis.
# np.linspace() is arithmetic progressionï¼Œ from 1 to 50
ax.set_xticks(np.linspace(1, 50, 50))
ax.set_yticks(np.linspace(0.80, 0.95, 4))

# Set the labels for the scales
ax.set_xticklabels(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
                    "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34",
                    "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50"],
                   fontproperties="monospace", fontsize=12, rotation=10)
ax.set_yticklabels(["0.80", "0.85", "0.90", "0.95"])

# Set the decorations for the scales and labels
ax.tick_params(left=False, pad=8, direction="in", length=2, width=3, color="b", labelsize=12)
ax.tick_params("x", labelrotation=10)

# Set the labels for x and y
ax.set_xlabel("Epochs", fontsize=16)
ax.set_ylabel("Cos Similarity", fontsize=16)

# Set the title
#ax.set_title("Figure for Epochs and Cosine Similarities.\n"
#             "Train-Human/Cyno-N, Train-Mouse-N-Fudan, Test-Human-N-Fudan.",
#             fontsize=18, backgroundcolor='#F8CECC', fontweight='bold', color='black', verticalalignment="baseline")

# Set the spines
ax.spines["left"].set_color("darkblue")
ax.spines["bottom"].set_linewidth(2)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)

# Set the annotations
#ax.annotate(s="Max:0.960398",xy=(17,0.94),xytext=(17.2,0.87),arrowprops=dict(facecolor="g",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)
#ax.annotate(s="Min:0.421085",xy=(1,0.4),xytext=(1.2,0.33),arrowprops=dict(facecolor="b",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)

# Set the legend
ax.legend(loc=3, labelspacing=1, handlelength=3, fontsize=14, shadow=True)

plt.show()