#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
###################################################################################################################
This script read epochs, cos_similarities data, and plot them.
The 285 training files are from Training-01-Human-285 .
The 285 + 76 training from Training-01-Human-285 and Training-02-Cyno-76 .
The 285 + 155 training from Training-01-Human-285 and Training-03-Human-for-evaluation-155 .

The testing file are from Testing-03-2202-P4M  .
The batch size is 32, learning rate is 2.

Created on 16 May 2022.
###################################################################################################################
"""
__author__ = 'ZLiang'

import matplotlib.pyplot as plt
import numpy as np

# Cosine similarities for different test cases. Totally 34 scores for each test.
# These are used for the y-axis.
# The values are from the folds of
#   1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
#   52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100
test_1_mean = [0.938758685298624, 0.9416066414441923, 0.9412507777515335, 0.9431006753695887, 0.9422348777418877,
               0.9420817371266602, 0.9432639878302672, 0.9420161166159762, 0.9426222390148749, 0.9425102584649465,
               0.9423905308672688, 0.9424742928058203, 0.9411413891659314, 0.9421598729793976, 0.9420488009110431,
               0.9420046516623946, 0.9425335856613584, 0.9417719082330481, 0.9422951936431918, 0.9414761092182251,
               0.9424387495376887, 0.9426819616176657, 0.9409258594756714, 0.9410774594108106, 0.9408238944291982,
               0.9424783193326197, 0.942761177878693, 0.9412321339344505, 0.9422363521990088, 0.9426872759918298,
               0.9427945531764611, 0.9418851610613527, 0.9425619271591026, 0.9414245039758893, ]
test_1_median = [0.9660154552986393, 0.9681566485977893, 0.9669955412659194, 0.9694132022226216, 0.969017061584738,
                 0.9685701132789624, 0.9691281091785254, 0.9688414250578921, 0.9690445834471049, 0.96894391018295,
                 0.9692110100251836, 0.9688934466214539, 0.9680114564785951, 0.9690743684472298, 0.969031631720787,
                 0.9689033141890342, 0.9690818622431603, 0.9686523297972462, 0.9696417155503644, 0.9683518854344053,
                 0.969239991780117, 0.9694871552059436, 0.9676669945093083, 0.9681877408911008, 0.9681217867189535,
                 0.969123157287133, 0.9690254374426034, 0.9682616402753085, 0.9689418673723703, 0.9694883821436884,
                 0.9692514250409592, 0.9686955101843637, 0.9688261354541932, 0.968382757634928, ]
test_2_mean = [0.9410119553738808, 0.9422664393752539, 0.9411370816034589, 0.9416931076489321, 0.9409542364569812,
               0.9425480503631132, 0.9421429271819772, 0.9420290613050367, 0.94270149332573, 0.9427316295345147,
               0.9421432603268882, 0.943149988233435, 0.9418419697824888, 0.942789502529511, 0.9426483716266498,
               0.9432052602402037, 0.9417405416152425, 0.9430960868091682, 0.9428776838522515, 0.9424555566653734,
               0.9412770146615539, 0.9429606576288744, 0.9424943412417962, 0.9420466860703623, 0.9428428921086216,
               0.9429920137231305, 0.9423768188946888, 0.9424945302654969, 0.9428257331705298, 0.9424877172978533,
               0.9427149649444193, 0.9421367541494949, 0.942836202947309, 0.9427865385370933, ]
test_2_median = [0.9675266305466421, 0.9684995829456982, 0.9675548636582179, 0.9684573524113829, 0.9678289468545294,
                 0.968566205212597, 0.9684295612539331, 0.9687864956138154, 0.9694246015745333, 0.9689397632888312,
                 0.9691721255766441, 0.969524776198936, 0.9688685252055935, 0.9696029278593328, 0.9693394482409616,
                 0.9696974514940019, 0.9682442372088667, 0.969299558482585, 0.9691456916284698, 0.9690482262207911,
                 0.9685078859812157, 0.9691712312591656, 0.9691510942747698, 0.968900052968199, 0.969614194257653,
                 0.9695479524330892, 0.9685862360810287, 0.9690820894040422, 0.9693571831580573, 0.9694343511704329,
                 0.9695189639880755, 0.9692435736705999, 0.9696293757543226, 0.9692304004869833, ]
test_3_mean = [0.9450518674045694, 0.945967454299345, 0.9475066575099507, 0.9486572106406468, 0.9481980337944877,
               0.9485936458540454, 0.9487048003551519, 0.9481881909697799, 0.9481792156609512, 0.9473384373112915,
               0.9488338230411018, 0.9487813910129766, 0.9489308323366213, 0.9489876875037196, 0.9487843281040179,
               0.9491299126663166, 0.9488487015507462, 0.9490785372067666, 0.9488442620993423, 0.9485753233109785,
               0.9491572688458363, 0.9492215698518672, 0.9490069455918575, 0.9492860679726848, 0.9490252108564702,
               0.94887153452687, 0.9493663176907813, 0.9492350362881049, 0.9497095080806129, 0.948822262889745,
               0.9493613440475333, 0.9494193883054785, 0.9494394902456336, 0.9494961899857056, ]
test_3_median = [0.9697813478601377, 0.9700373143705775, 0.9717282039969991, 0.9723501312282239, 0.9720200792245008,
                 0.9719679836854249, 0.9722879484700844, 0.9718139778923354, 0.9718759873344363, 0.9710020633577015,
                 0.9724445363540059, 0.9721165339747911, 0.9719748213978663, 0.9722105660753293, 0.972204810031537,
                 0.9725141315488974, 0.9723956510560069, 0.9723591196230262, 0.972156281146822, 0.9721466294861716,
                 0.972261801552545, 0.9725260593785952, 0.9726752068984641, 0.9723382147247492, 0.9725474978830692,
                 0.9726204313310275, 0.9725734315490755, 0.9724695589050232, 0.972892835223542, 0.9722851642295693,
                 0.9720172394108857, 0.9725944165919921, 0.9726644747091089, 0.9725108733308461, ]

# The number of folds for the training, each fold contains 5 epochs.
# The folds range from 1 to 35, corresponding the epochs range from 5 to 500.
x = np.arange(1, 35)

# Create the size of the figure.
fig=plt.figure(num=1,figsize=(16, 8))

# Set the size of subplot and starting point, set three styles for the plot
ax=fig.add_subplot(111)
ax.plot(x, test_1_mean, "r--.", label="Mean for Testing-03 on Training-01")
ax.plot(x, test_1_median, "r-x", label="Median for Testing-03 on Training-01")
ax.plot(x, test_2_mean, "b-.^", label="Mean for Testing-03 on Training-02")
ax.plot(x, test_2_median, "b:+", label="Median for Testing-03 on Training-02")
ax.plot(x, test_3_mean, "y--+", label="Mean for Testing-03 on Training-03")
ax.plot(x, test_3_median, "y-d", label="Median for Testing-03 on Training-03")

# Set the scales for x-axis and y-axis.
ax.set_xlim([1, 34.1])
ax.set_ylim([0.85, 1])

# Set the scales for the display of x-axis and y-axis.
# np.linspace() is arithmetic progressionï¼Œ from 1 to 34
ax.set_xticks(np.linspace(1, 34, 34))
ax.set_yticks(np.linspace(0.85, 1, 4))

# Set the labels for the scales
ax.set_xticklabels(["5", "20", "35", "50", "65", "80", "95", "110", "125", "140", "155", "170", "185", "200", "215",
                    "230", "245", "260", "275", "290", "305", "320", "335", "350", "365", "380", "395", "410", "425",
                    "440", "455", "470", "485", "500", ], fontproperties="monospace", fontsize=12, rotation=10)
ax.set_yticklabels(["0.85", "0.90", "0.95", "1.0"])

# Set the decorations for the scales and labels
ax.tick_params(left=False,pad=8,direction="in",length=2,width=3,color="b",labelsize=12)
ax.tick_params("x",labelrotation=10)

# Set the labels for x and y
ax.set_xlabel("Epochs", fontsize = 16)
ax.set_ylabel("Cos Similarity", fontsize = 16)

# Set the title
ax.set_title("Figure for Epochs and Cosine Similarities", fontsize=18,backgroundcolor='#F8CECC',
             fontweight='bold',color='black',verticalalignment="baseline")

# Set the spines
ax.spines["left"].set_color("darkblue")
ax.spines["bottom"].set_linewidth(2)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)

# Set the annotations
#ax.annotate(s="Max:0.960398",xy=(17,0.94),xytext=(17.2,0.87),arrowprops=dict(facecolor="g",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)
#ax.annotate(s="Min:0.421085",xy=(1,0.4),xytext=(1.2,0.33),arrowprops=dict(facecolor="b",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)

# Set the legend
ax.legend(loc=3,labelspacing=1,handlelength=3,fontsize=14,shadow=True)

plt.show()