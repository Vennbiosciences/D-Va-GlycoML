#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
###################################################################################################################
This script read epochs, cos_similarities data, and plot them.
The 285 + 76 training files are from Training-01-Human-285 and Training-02-Cyno-76 .

The testing files are from Testing-03-2202-P4M .

The batch size is 64, learning rates are 2, 4, 8, 16.

Created on 24 May 2022.
###################################################################################################################
"""
__author__ = 'ZLiang'

import matplotlib.pyplot as plt
import numpy as np

# Cosine similarities for different test cases. Totally 50 scores for each test.
# These are used for the y-axis.
# The values are from the epochs of
#   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
#   27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50.
test_1_mean = [0.927380, 0.934930, 0.937771, 0.936876, 0.937475, 0.937902, 0.940082, 0.939232, 0.941128, 0.941165,
               0.941453, 0.940203, 0.940408, 0.941244, 0.939864, 0.941368, 0.940858, 0.942625, 0.942419, 0.942336,
               0.941031, 0.942496, 0.942308, 0.942004, 0.942516, 0.941710, 0.942380, 0.941897, 0.942573, 0.942838,
               0.941395, 0.942429, 0.942852, 0.941343, 0.942288, 0.942988, 0.942456, 0.943077, 0.941746, 0.943141,
               0.942520, 0.942989, 0.942351, 0.942471, 0.942149, 0.942636, 0.942731, 0.943182, 0.941883, 0.941809,
               ]
test_1_median = [0.957040, 0.963230, 0.965188, 0.964085, 0.965309, 0.965176, 0.967211, 0.965804, 0.967547, 0.968110,
                 0.968443, 0.967398, 0.967406, 0.967990, 0.967211, 0.968144, 0.967892, 0.969502, 0.968701, 0.968533,
                 0.968233, 0.969100, 0.968681, 0.967784, 0.968734, 0.968426, 0.969111, 0.968573, 0.968958, 0.969464,
                 0.967731, 0.969368, 0.969479, 0.968031, 0.968448, 0.968983, 0.968704, 0.969337, 0.968379, 0.969668,
                 0.968828, 0.968906, 0.968458, 0.969054, 0.968274, 0.969491, 0.968833, 0.969080, 0.969586, 0.968728,
                 ]
test_2_mean = [0.932984, 0.937450, 0.936825, 0.939107, 0.940033, 0.938686, 0.940594, 0.940474, 0.942007, 0.942482,
               0.941806, 0.941658, 0.941204, 0.942107, 0.940594, 0.940820, 0.941329, 0.940213, 0.941564, 0.941317,
               0.941233, 0.942423, 0.941341, 0.942392, 0.942575, 0.942361, 0.942091, 0.942192, 0.942374, 0.942455,
               0.941989, 0.942426, 0.941756, 0.941088, 0.941296, 0.942227, 0.942440, 0.941517, 0.942561, 0.942624,
               0.941731, 0.941710, 0.942436, 0.942819, 0.942112, 0.942364, 0.942640, 0.942014, 0.942084, 0.942621,
               ]
test_2_median = [0.960070, 0.964057, 0.963783, 0.966060, 0.967064, 0.966375, 0.967857, 0.968145, 0.968304, 0.968864,
                 0.967695, 0.968732, 0.968360, 0.968141, 0.966940, 0.967844, 0.968273, 0.967710, 0.968222, 0.968161,
                 0.968450, 0.969008, 0.968307, 0.968775, 0.968736, 0.969068, 0.969111, 0.968741, 0.969132, 0.968824,
                 0.968565, 0.968481, 0.967856, 0.967034, 0.967988, 0.968545, 0.968882, 0.967922, 0.968708, 0.968860,
                 0.968349, 0.968770, 0.968867, 0.969285, 0.967915, 0.968905, 0.968852, 0.968961, 0.969056, 0.969176,
                 ]
test_3_mean = [0.930924, 0.936337, 0.939011, 0.939725, 0.940572, 0.940211, 0.939907, 0.938956, 0.939636, 0.938823,
               0.940606, 0.939802, 0.941144, 0.938557, 0.941549, 0.941964, 0.939042, 0.941132, 0.941740, 0.942281,
               0.941684, 0.940844, 0.942087, 0.941798, 0.942417, 0.941693, 0.941043, 0.941989, 0.941617, 0.939729,
               0.940877, 0.941170, 0.941214, 0.940980, 0.939660, 0.942345, 0.942002, 0.941814, 0.941359, 0.941281,
               0.941433, 0.941485, 0.941125, 0.941302, 0.941266, 0.941984, 0.942579, 0.940855, 0.941220, 0.942358,
               ]
test_3_median = [0.959618, 0.964701, 0.966224, 0.966763, 0.967804, 0.967552, 0.966531, 0.965532, 0.966694, 0.965082,
                 0.966978, 0.967764, 0.967744, 0.965486, 0.967470, 0.968278, 0.966759, 0.967737, 0.968346, 0.969035,
                 0.968013, 0.967506, 0.968699, 0.968253, 0.968554, 0.967983, 0.967894, 0.968278, 0.968181, 0.965749,
                 0.967752, 0.968144, 0.968110, 0.967781, 0.966165, 0.967967, 0.968070, 0.967952, 0.967497, 0.968603,
                 0.968244, 0.968212, 0.967688, 0.967799, 0.968145, 0.968636, 0.968943, 0.967703, 0.967814, 0.969139,
                 ]
test_4_mean = [0.932514, 0.935418, 0.935386, 0.938899, 0.938115, 0.937420, 0.937753, 0.940223, 0.935040, 0.939938,
               0.938489, 0.939152, 0.938882, 0.938435, 0.939420, 0.940352, 0.939824, 0.940384, 0.939278, 0.939593,
               0.938272, 0.938955, 0.936738, 0.939170, 0.939687, 0.939946, 0.939948, 0.940697, 0.941129, 0.940564,
               0.940726, 0.938957, 0.939591, 0.939399, 0.936483, 0.936302, 0.938143, 0.936567, 0.939639, 0.939048,
               0.935876, 0.939419, 0.940238, 0.939707, 0.940430, 0.935999, 0.940443, 0.939900, 0.937033, 0.940512,
               ]
test_4_median = [0.958839, 0.962949, 0.964056, 0.966606, 0.964736, 0.964689, 0.964661, 0.966487, 0.962795, 0.967057,
                 0.964865, 0.965489, 0.965854, 0.966903, 0.966098, 0.967405, 0.966757, 0.967220, 0.966929, 0.966865,
                 0.964875, 0.966334, 0.963602, 0.966676, 0.966447, 0.967227, 0.967336, 0.967873, 0.967839, 0.966500,
                 0.967141, 0.965746, 0.967540, 0.966729, 0.964920, 0.964061, 0.966213, 0.964751, 0.967246, 0.966192,
                 0.963506, 0.966264, 0.967708, 0.966171, 0.966603, 0.962803, 0.967128, 0.966386, 0.963343, 0.966651,
                 ]

# The number of epochs for the training.
x = np.arange(1, 51)

# Create the size of the figure.
fig=plt.figure(num=1,figsize=(16, 8))

# Set the size of subplot and starting point, set three styles for the plot
ax=fig.add_subplot(111)
ax.plot(x, test_1_mean, "r--.", label="Mean for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76), LR=0.0002")
ax.plot(x, test_1_median, "r-x", label="Median for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76), LR=0.0002")
ax.plot(x, test_2_mean, "b-.^", label="Mean for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76, LR=0.0004")
ax.plot(x, test_2_median, "b:+", label="Median for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76), LR=0.0004")
ax.plot(x, test_3_mean, "y--+", label="Mean for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76, LR=0.0008")
ax.plot(x, test_3_median, "y-.,", label="Median for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76), LR=0.0008")
ax.plot(x, test_4_mean, "g-d", label="Mean for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76, LR=0.0016")
ax.plot(x, test_4_median, "g--|", label="Median for Testing-03-2202-P4M on Training-02(Human-285+Cyno-76), LR=0.0016")

# Set the scales for x-axis and y-axis.
ax.set_xlim([1, 50.1])
ax.set_ylim([0.85, 1])

# Set the scales for the display of x-axis and y-axis.
# np.linspace() is arithmetic progressionï¼Œ from 1 to 50
ax.set_xticks(np.linspace(1, 50, 50))
ax.set_yticks(np.linspace(0.85, 1, 4))

# Set the labels for the scales
ax.set_xticklabels(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
                    "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34",
                    "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50"],
                   fontproperties="monospace", fontsize=12, rotation=10)
ax.set_yticklabels(["0.85", "0.90", "0.95", "1.0"])

# Set the decorations for the scales and labels
ax.tick_params(left=False,pad=8,direction="in",length=2,width=3,color="b",labelsize=12)
ax.tick_params("x",labelrotation=10)

# Set the labels for x and y
ax.set_xlabel("Epochs", fontsize = 16)
ax.set_ylabel("Cos Similarity", fontsize = 16)

# Set the title
ax.set_title("Figure for Epochs and Cosine Similarities", fontsize=18,backgroundcolor='#F8CECC',
             fontweight='bold',color='black',verticalalignment="baseline")

# Set the spines
ax.spines["left"].set_color("darkblue")
ax.spines["bottom"].set_linewidth(2)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)

# Set the annotations
#ax.annotate(s="Max:0.960398",xy=(17,0.94),xytext=(17.2,0.87),arrowprops=dict(facecolor="g",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)
#ax.annotate(s="Min:0.421085",xy=(1,0.4),xytext=(1.2,0.33),arrowprops=dict(facecolor="b",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)

# Set the legend
ax.legend(loc=3,labelspacing=1,handlelength=3,fontsize=14,shadow=True)

plt.show()