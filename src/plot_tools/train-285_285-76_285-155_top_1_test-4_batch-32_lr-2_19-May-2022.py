#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
###################################################################################################################
This script read epochs, cos_similarities data, and plot them.
The 285 training files are from Training-01-Human-285 .
The 285 + 76 training from Training-01-Human-285 and Training-02-Cyno-76 .
The 285 + 155 training from Training-01-Human-285 and Training-03-Human-for-evaluation-155 .

The testing file are from Testing-04-21-11-Human-267-100pro-semi .
The batch size is 32, learning rate is 2.

Created on 19 May 2022.
###################################################################################################################
"""
__author__ = 'ZLiang'

import matplotlib.pyplot as plt
import numpy as np

# Cosine similarities for different test cases. Totally 34 scores for each test.
# These are used for the y-axis.
# The values are from the folds of
#   1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
#   52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100
test_1_mean = [0.8642116425846023, 0.8622650958217277, 0.8601332634299852, 0.8630226665094375, 0.8588275089253036,
               0.8589735648122944, 0.858867204119539, 0.8581146170275826, 0.8569144392152892, 0.8576434510848838,
               0.8571154690768815, 0.857570564525768, 0.8566865477158117, 0.8558119859762987, 0.8573631263338037,
               0.854229428224203, 0.8534337183552165, 0.851683943487415, 0.8540202183521183, 0.8530773655431231,
               0.8531220318063848, 0.8524868898739947, 0.8510845653090373, 0.8527028971595925, 0.8502784515922327,
               0.8523473071493018, 0.8536796094043682, 0.8516764962615369, 0.8506835414430963, 0.8521384342631849,
               0.8517210107671408, 0.8526955760648276, 0.8531080893543347, 0.8523667725963419, ]
test_1_median = [0.9129593015229559, 0.910736537403406, 0.9086958604784549, 0.911100589754049, 0.9080970269839436,
                 0.9077571799789431, 0.9064230058131708, 0.9067465272098914, 0.9049674999354109, 0.90631408812712,
                 0.9058764300682346, 0.9051342430426191, 0.903929748773952, 0.9037481026487789, 0.9060000960649932,
                 0.9039954615373743, 0.9033926788731299, 0.9001711390981464, 0.9028397595972824, 0.90312124933625,
                 0.9025756169012777, 0.9028341486375999, 0.902559987815135, 0.902474165799577, 0.9015177409321722,
                 0.9043040794074684, 0.9026908597795844, 0.9027615945706212, 0.9002057941260041, 0.8993393382933408,
                 0.9015581746880259, 0.9031875489708276, 0.9010545961731665, 0.9017364134679635, ]
test_2_mean = [0.8737561590079292, 0.8695702283411735, 0.8657122625638495, 0.8660294377582246, 0.8658115285341498,
               0.8650568543863957, 0.8651234384075568, 0.8651117107987987, 0.8646629481900565, 0.8653116108305914,
               0.8659732328604501, 0.8653951514507892, 0.8639044494451782, 0.8645201365265749, 0.8648446061090407,
               0.8628698164231013, 0.8621611662748355, 0.8642017858734208, 0.8652132114377483, 0.8625079929151995,
               0.8641095557943059, 0.8629861199848923, 0.8638126399085184, 0.8613724355599478, 0.8612075895601249,
               0.8643111298530587, 0.8622864369948942, 0.8624524242320494, 0.8626523462827341, 0.8629954427583791,
               0.8617203824748573, 0.8633106994191466, 0.8625469057517425, 0.8607324841948437, ]
test_2_median = [0.9209249223527958, 0.9190075464708899, 0.9142801788907041, 0.9154176794125296, 0.9150750695395338,
                 0.9153014143539686, 0.9150542349323104, 0.9151714183665965, 0.9156539669979648, 0.9165901493756511,
                 0.9177246981399744, 0.916417124409955, 0.9159379700420106, 0.9164679035813582, 0.9179804743676118,
                 0.9143519662994853, 0.914384866265605, 0.9152028114531496, 0.9158367185958656, 0.9135456238517581,
                 0.9161227212483892, 0.9148127993869155, 0.9153219822057332, 0.9119312588831757, 0.9135899908732754,
                 0.9141662601975169, 0.9130144635150225, 0.9132183463102282, 0.9136488332641299, 0.913036036758192,
                 0.9120427414028593, 0.9138559711874432, 0.9128050870710301, 0.9102121261476043, ]
test_3_mean = [0.8688820369528316, 0.8654008675234134, 0.8601917863801113, 0.8580986028591582, 0.8564015134614215,
               0.8539444636358207, 0.8529054885706977, 0.8531725213449792, 0.8497550340105688, 0.8509813047115902,
               0.8527610107368702, 0.8495639773085927, 0.8471906032143113, 0.8501998342367725, 0.8478695318914654,
               0.848703967344086, 0.8507691415349171, 0.8474004560673478, 0.8478582216677922, 0.8489760231658539,
               0.8482399109438583, 0.8464213775031322, 0.8460389679693585, 0.8467947682115505, 0.847444614994381,
               0.8451911591059357, 0.8495574184787266, 0.8463316078970556, 0.8480905722331115, 0.848791886811966,
               0.8462461031874966, 0.8473728376840762, 0.8475895273999599, 0.8499945624716283, ]
test_3_median = [0.9181742163866261, 0.9133063800804855, 0.9085162277097386, 0.9041801924670934, 0.9030896220784086,
                 0.9004373942526283, 0.8992352190139627, 0.9000692570608919, 0.8978593668708817, 0.8987916863886465,
                 0.8995128704412935, 0.896761461099132, 0.8928992252677791, 0.8981793714170992, 0.8939574224828715,
                 0.8940472354646621, 0.8951556361660605, 0.892786141766353, 0.8939617881657246, 0.8951871538604311,
                 0.8943728464698505, 0.8927208503179335, 0.8923441291411346, 0.8941857235516757, 0.895491524163239,
                 0.8923897049805203, 0.8959453207714035, 0.8930083672861516, 0.8939551681059961, 0.8951499600460218,
                 0.8919105425466135, 0.8940755315458435, 0.8958960144320289, 0.8962707887146887, ]

# The number of folds for the training, each fold contains 5 epochs.
# The folds range from 1 to 35, corresponding the epochs range from 5 to 500.
x = np.arange(1, 35)

# Create the size of the figure.
fig=plt.figure(num=1,figsize=(16, 8))

# Set the size of subplot and starting point, set three styles for the plot
ax=fig.add_subplot(111)
ax.plot(x, test_1_mean, "r--.", label="Mean for Testing-04 on Training-01")
ax.plot(x, test_1_median, "r-x", label="Median for Testing-04 on Training-01")
ax.plot(x, test_2_mean, "b-.^", label="Mean for Testing-04 on Training-02")
ax.plot(x, test_2_median, "b:+", label="Median for Testing-04 on Training-02")
ax.plot(x, test_3_mean, "y--+", label="Mean for Testing-04 on Training-03")
ax.plot(x, test_3_median, "y-d", label="Median for Testing-04 on Training-03")

# Set the scales for x-axis and y-axis.
ax.set_xlim([1, 34.1])
ax.set_ylim([0.75, 1])

# Set the scales for the display of x-axis and y-axis.
# np.linspace() is arithmetic progressionï¼Œ from 1 to 34
ax.set_xticks(np.linspace(1, 34, 34))
ax.set_yticks(np.linspace(0.75, 1, 6))

# Set the labels for the scales
ax.set_xticklabels(["5", "20", "35", "50", "65", "80", "95", "110", "125", "140", "155", "170", "185", "200", "215",
                    "230", "245", "260", "275", "290", "305", "320", "335", "350", "365", "380", "395", "410", "425",
                    "440", "455", "470", "485", "500", ], fontproperties="monospace", fontsize=12, rotation=10)
ax.set_yticklabels(["0.75", "0.80", "0.85", "0.90", "0.95", "1.0"])

# Set the decorations for the scales and labels
ax.tick_params(left=False,pad=8,direction="in",length=2,width=3,color="b",labelsize=12)
ax.tick_params("x",labelrotation=10)

# Set the labels for x and y
ax.set_xlabel("Epochs", fontsize = 16)
ax.set_ylabel("Cos Similarity", fontsize = 16)

# Set the title
ax.set_title("Figure for Epochs and Cosine Similarities", fontsize=18,backgroundcolor='#F8CECC',
             fontweight='bold',color='black',verticalalignment="baseline")

# Set the spines
ax.spines["left"].set_color("darkblue")
ax.spines["bottom"].set_linewidth(2)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)

# Set the annotations
#ax.annotate(s="Max:0.960398",xy=(17,0.94),xytext=(17.2,0.87),arrowprops=dict(facecolor="g",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)
#ax.annotate(s="Min:0.421085",xy=(1,0.4),xytext=(1.2,0.33),arrowprops=dict(facecolor="b",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)

# Set the legend
ax.legend(loc=3,labelspacing=1,handlelength=3,fontsize=14,shadow=True)

plt.show()