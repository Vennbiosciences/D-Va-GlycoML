#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
###################################################################################################################
This script read epochs, cos_similarities data, and plot them.
The 285 training files are from Training-01-Human-285 .
The 285 + 76 training from Training-01-Human-285 and Training-02-Cyno-76 .
The 285 + 155 training from Training-01-Human-285 and Training-03-Human-for-evaluation-155 .

The testing file are from Testing-01-Different-HCD-energies-24: Energy-01-HCD-15-20-34-37-40 .
The batch size is 32, learning rate is 2.

Created on 09 May 2022.
###################################################################################################################
"""
__author__ = 'ZLiang'

import matplotlib.pyplot as plt
import numpy as np

# Cosine similarities for different test cases. Totally 34 scores for each test.
# These are used for the y-axis.
# The values are from the folds of
#   1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
#   52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100
test_1_mean = [0.885486421107945, 0.8855462460866504, 0.8857037628589813, 0.8849197643111476, 0.8833589387371652,
               0.8827343363704209, 0.8832094938384725, 0.8802813845322773, 0.8793952162010565, 0.8803393032234037,
               0.8813696824379326, 0.879875982974615, 0.8795501805687547, 0.8794665362642109, 0.8791322929681947,
               0.8808373223722489, 0.8801164252942173, 0.8792172847200581, 0.8780588458935729, 0.878950742446205,
               0.878571148772766, 0.8773582916709871, 0.8791891962106876, 0.8792842351315726, 0.8801154804263335,
               0.8769394032329866, 0.8803922980380668, 0.8794117362592164, 0.8781609821086322, 0.8803670802987971,
               0.8789337005919093, 0.8789586531909781, 0.8789712379253941, 0.8805812328706676, ]
test_1_median = [0.9610788775558861, 0.9594953760033962, 0.958979173033334, 0.9577877678634839, 0.960146661146974,
                 0.9591893947395627, 0.9573678515992754, 0.9580576507721082, 0.9572387404941064, 0.9584127025751459,
                 0.9582270626831269, 0.9565091841702549, 0.9567606154342047, 0.9575744818355216, 0.9575036183558338,
                 0.9572184627637984, 0.9567079589823593, 0.9568761222682003, 0.957032034618683, 0.9559853101077711,
                 0.9573807116342606, 0.9570235699692926, 0.9567952535829239, 0.959079869663946, 0.9596032852244832,
                 0.9565126566598032, 0.9581063977151558, 0.958148931656986, 0.9570519155981115, 0.9579779553339817,
                 0.9576534537127527, 0.9557151790794052, 0.9564103321479606, 0.9581945368739618, ]
test_2_mean = [0.8901012475237373, 0.8894571825383518, 0.8842766421219462, 0.8833584410245001, 0.8828984630665838,
               0.8836895249378895, 0.8850644663541597, 0.8846490257023167, 0.8842320099576566, 0.8871832261182534,
               0.8838041861848152, 0.8833679151830098, 0.8841266453251844, 0.8830739871244996, 0.8856346192747337,
               0.88343577051097, 0.8845539091371563, 0.884549321517474, 0.8833329868214661, 0.8840160740529867,
               0.8844787612370707, 0.8839580149150776, 0.8832986617991366, 0.8830573418161288, 0.8828520693222667,
               0.8838321638084415, 0.8819707268719117, 0.8847544735352886, 0.8826893698375222, 0.8812217686284659,
               0.8818369963131117, 0.8824140412308389, 0.8813670852579809, 0.881063864505918, ]
test_2_median = [0.9613419792558807, 0.9610936251364507, 0.9605155547704347, 0.9605532199309521, 0.9593605428955467,
                 0.9592312690391076, 0.9602643394297852, 0.9600351938184057, 0.9603556592902351, 0.9587203926906348,
                 0.9602905538466164, 0.9587711845934468, 0.9600298807835989, 0.958511957520174, 0.9597828710328523,
                 0.9581893715136031, 0.9592183236327757, 0.9577711227953303, 0.9597952600401874, 0.9577143040652756,
                 0.9591935044759874, 0.9588579616241613, 0.9595914001788475, 0.9593126695320763, 0.9594394568190083,
                 0.9582435417573517, 0.9569162676056432, 0.9591062267981114, 0.9581622209783831, 0.9595002529311959,
                 0.959016207776513, 0.9590339524190651, 0.9593235682624955,0.9583345339742436, ]
test_3_mean = [0.8882110765251777, 0.8858393253286572, 0.8852473562148617, 0.8836196453835243, 0.882675734640939,
               0.8836215610463933, 0.8827944581128534, 0.882422546779243, 0.8834635432391449, 0.8816224705674339,
               0.8822696823470901, 0.8817014909403026, 0.8839011099336526, 0.8834659599344225, 0.8845029875297535,
               0.8831349840682408, 0.8817509370799624, 0.8813382077214984, 0.8812200098819611, 0.8806177788521328,
               0.881153472712667, 0.8803408110000833, 0.8813010841849211, 0.8791654054345176, 0.8816020982062369,
               0.8804418230070371, 0.8803178683428139, 0.8796530432996446, 0.879430365864766, 0.8809250591382374,
               0.879114816299657, 0.880823696019196, 0.8822162832465109, 0.8781611075180727, ]
test_3_median = [0.9598709203332854, 0.9595285006379437, 0.9599975715089515, 0.9580556743219832, 0.9590224076490291,
                 0.9588060066248543, 0.9578595261949716, 0.9596712956983191, 0.9591273051339456, 0.95925198285203,
                 0.9578455914263412, 0.9598882351733924, 0.9589769726321307, 0.9569831936004746, 0.9584088039728197,
                 0.9589620078423368, 0.9582042706256158, 0.9580467198506446, 0.9583965057917377, 0.9596191325883314,
                 0.9571948050706228, 0.9589724214273047, 0.9585262942538567, 0.9576170631421684, 0.9588873315541406,
                 0.9587407144078861, 0.9578855220657887, 0.9581101171300086, 0.9573121640617934, 0.9591983228538938,
                 0.9559212351461295, 0.9581097775297827, 0.9569988334845245, 0.9572192378728023, ]

# The number of folds for the training, each fold contains 5 epochs.
# The folds range from 1 to 35, corresponding the epochs range from 5 to 500.
x = np.arange(1, 35)

# Create the size of the figure.
fig=plt.figure(num=1,figsize=(16, 8))

# Set the size of subplot and starting point, set three styles for the plot
ax=fig.add_subplot(111)
ax.plot(x, test_1_mean, "r--.", label="Mean for Energy-01-HCD-15-20-34-37-40 on Training-01")
ax.plot(x, test_1_median, "r-x", label="Median for Energy-01-HCD-15-20-34-37-40 on Training-01")
ax.plot(x, test_2_mean, "b-.^", label="Mean for Energy-01-HCD-15-20-34-37-40 on Training-02")
ax.plot(x, test_2_median, "b:+", label="Median for Energy-01-HCD-15-20-34-37-40 on Training-02")
ax.plot(x, test_3_mean, "y--+", label="Mean for Energy-01-HCD-15-20-34-37-40 on Training-03")
ax.plot(x, test_3_median, "y-d", label="Median for Energy-01-HCD-15-20-34-37-40 on Training-03")

# Set the scales for x-axis and y-axis.
ax.set_xlim([1, 34.1])
ax.set_ylim([0.75, 1])

# Set the scales for the display of x-axis and y-axis.
# np.linspace() is arithmetic progressionï¼Œ from 1 to 34
ax.set_xticks(np.linspace(1, 34, 34))
ax.set_yticks(np.linspace(0.75, 1, 6))

# Set the labels for the scales
ax.set_xticklabels(["5", "20", "35", "50", "65", "80", "95", "110", "125", "140", "155", "170", "185", "200", "215",
                    "230", "245", "260", "275", "290", "305", "320", "335", "350", "365", "380", "395", "410", "425",
                    "440", "455", "470", "485", "500", ], fontproperties="monospace", fontsize=12, rotation=10)
ax.set_yticklabels(["0.75", "0.8", "0.85", "0.9", "0.95", "1.0"])

# Set the decorations for the scales and labels
ax.tick_params(left=False,pad=8,direction="in",length=2,width=3,color="b",labelsize=12)
ax.tick_params("x",labelrotation=10)

# Set the labels for x and y
ax.set_xlabel("Epochs", fontsize = 16)
ax.set_ylabel("Cos Similarity", fontsize = 16)

# Set the title
ax.set_title("Figure for Epochs and Cosine Similarities", fontsize=18,backgroundcolor='#F8CECC',
             fontweight='bold',color='black',verticalalignment="baseline")

# Set the spines
ax.spines["left"].set_color("darkblue")
ax.spines["bottom"].set_linewidth(2)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)

# Set the annotations
#ax.annotate(s="Max:0.960398",xy=(17,0.94),xytext=(17.2,0.87),arrowprops=dict(facecolor="g",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)
#ax.annotate(s="Min:0.421085",xy=(1,0.4),xytext=(1.2,0.33),arrowprops=dict(facecolor="b",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)

# Set the legend
ax.legend(loc=3,labelspacing=1,handlelength=3,fontsize=14,shadow=True)

plt.show()