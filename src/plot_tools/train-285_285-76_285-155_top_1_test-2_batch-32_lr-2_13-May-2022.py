#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
###################################################################################################################
This script read epochs, cos_similarities data, and plot them.
The 285 training files are from Training-01-Human-285 .
The 285 + 76 training from Training-01-Human-285 and Training-02-Cyno-76 .
The 285 + 155 training from Training-01-Human-285 and Training-03-Human-for-evaluation-155 .

The testing file are from Testing-02-210919-Column-Flush .
The batch size is 32, learning rate is 2.

Created on 13 May 2022.
###################################################################################################################
"""
__author__ = 'ZLiang'

import matplotlib.pyplot as plt
import numpy as np

# Cosine similarities for different test cases. Totally 34 scores for each test.
# These are used for the y-axis.
# The values are from the folds of
#   1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
#   52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100
test_1_mean = [0.940096301558436, 0.9432771683797595, 0.9443481043202678, 0.9451948085890806, 0.9452182734254432,
               0.9456399325980052, 0.9459218886323819, 0.9458548305298168, 0.9462907663528344, 0.9463527492499202,
               0.9463910448824892, 0.9463146902677126, 0.9462536693218294, 0.9464559620319785, 0.9465939306738175,
               0.9467257878117721, 0.947015672812991, 0.9468689738467368, 0.9469178025307556, 0.9471698871054883,
               0.9472352628514094, 0.9470017533237021, 0.9467323763760618, 0.9469481741608785, 0.9468596666951674,
               0.9473629670330991, 0.9476666839609992, 0.9472534979304221, 0.9472338824938743, 0.947637267775414,
               0.9474683278997581, 0.9474438137751053, 0.9475724976136368, 0.9471400569859748, ]
test_1_median = [0.9644086999694422, 0.9663665207908111, 0.9665811381413202, 0.9675331946113426, 0.9680484030836369,
                 0.9675552627341427, 0.9672506288910299, 0.9680171455373229, 0.9681531030378198, 0.9682158535081254,
                 0.9681741944425957, 0.9671700785919, 0.9677142452529915, 0.9683465114229798, 0.9681876394145064,
                 0.9681449705285685, 0.9680185172052275, 0.9681544603452836, 0.9686014012850025, 0.9682015222078715,
                 0.9683204590576574, 0.9681640054262951, 0.9678171897948507, 0.9685189552699367, 0.968338029780291,
                 0.9680196206258167, 0.9679888954307501, 0.9685664352159817, 0.9683241904905413, 0.9686773351521959,
                 0.9684785224153755, 0.967909177319581, 0.9682772628746292, 0.9687783951871893, ]
test_2_mean = [0.9408749930606066, 0.9434125364483329, 0.9435125607344238, 0.9441449775175517, 0.943788203582653,
               0.9451055227992542, 0.9449756638484255, 0.9449050246088346, 0.9451442449327229, 0.9456151672314835,
               0.9453786379619283, 0.9457195614811235, 0.9450929325792219, 0.9456873245514271, 0.9459697223414504,
               0.9460521779270096, 0.9455627144149839, 0.9461185860052301, 0.9459485736884228, 0.945828400917593,
               0.9455610469686813, 0.9461496537789916, 0.9460124774824199, 0.9459320468031907, 0.9459174777984453,
               0.9460804748659782, 0.9463722506669169, 0.9462736747568615, 0.9464297296305954, 0.9461683704917173,
               0.9462399307415544, 0.9460668694217107, 0.9462646031942376, 0.9461195589191858, ]
test_2_median = [0.9641622338316879, 0.9661839747909972, 0.9664721772880285, 0.9672234573708419, 0.9667512028929521,
                 0.9673494520071977, 0.9669635967274381, 0.9675475887290752, 0.9674979696499997, 0.9675087681131306,
                 0.9681595538478756, 0.9681124084973922, 0.9675685396119907, 0.9677873854501591, 0.968088701784471,
                 0.9675857055866799, 0.9677837029570192, 0.967767576053227, 0.9674908397893153, 0.9675827507648943,
                 0.9679963836279243, 0.9675062205413136, 0.9681236081280642, 0.9679048536284174, 0.967692468647974,
                 0.9676454089669648, 0.9676275927446931, 0.9677053612215771, 0.967816433254228, 0.9683839129351949,
                 0.9679920584361285, 0.9681198248775089, 0.9681769709978946, 0.9676378061044748, ]
test_3_mean = [0.9404034340235697, 0.9429294275707906, 0.9440006948248786, 0.9445037276050886, 0.9447934434197528,
               0.945144934095016, 0.9451134317259942, 0.9450065788389884, 0.945243971895653, 0.945187778942601,
               0.9454311099587692, 0.9457009789230351, 0.9455916095661906, 0.945848500367972, 0.9458235603024725,
               0.9459244742357422, 0.9460520970064433, 0.945990714241696, 0.9460710533504683, 0.9457304448110964,
               0.9460976758840054, 0.946366328802795, 0.9461653198792911, 0.9459444284861424, 0.9464415150818529,
               0.9462140103351159, 0.9464845812833855, 0.9462705783743821, 0.9464393479058854, 0.9461877480510732,
               0.9462583349061653, 0.9461523483950953, 0.9461941450313057, 0.9462434366942285, ]
test_3_median = [0.9634527863481668, 0.9654768286265502, 0.9668769196534466, 0.966737435007263, 0.9673702209076372,
                 0.9668658981923427, 0.9669840229675054, 0.9673729294395442, 0.9674053467257885, 0.9668847717693122,
                 0.9676144116586567, 0.9675109827454199, 0.9672481809556774, 0.9673526552876668, 0.9674661116409738,
                 0.9676215751218029, 0.9679132139722282, 0.9676466497569316, 0.9677154174553633, 0.9678277913080191,
                 0.9675329872410822, 0.9676578356088653, 0.967971194195976, 0.9667706803908389, 0.9682822625757567,
                 0.9678775339342207, 0.9678670216483918, 0.9677914780234727, 0.9673441222797605, 0.9679759800701381,
                 0.967060104941227, 0.9675241661398105, 0.9676886594341172, 0.9675035299881023, ]

# The number of folds for the training, each fold contains 5 epochs.
# The folds range from 1 to 35, corresponding the epochs range from 5 to 500.
x = np.arange(1, 35)

# Create the size of the figure.
fig=plt.figure(num=1,figsize=(16, 8))

# Set the size of subplot and starting point, set three styles for the plot
ax=fig.add_subplot(111)
ax.plot(x, test_1_mean, "r--.", label="Mean for Testing-02 on Training-01")
ax.plot(x, test_1_median, "r-x", label="Median for Testing-02 on Training-01")
ax.plot(x, test_2_mean, "b-.^", label="Mean for Testing-02 on Training-02")
ax.plot(x, test_2_median, "b:+", label="Median for Testing-02 on Training-02")
ax.plot(x, test_3_mean, "y--+", label="Mean for Testing-02 on Training-03")
ax.plot(x, test_3_median, "y-d", label="Median for Testing-02 on Training-03")

# Set the scales for x-axis and y-axis.
ax.set_xlim([1, 34.1])
ax.set_ylim([0.85, 1])

# Set the scales for the display of x-axis and y-axis.
# np.linspace() is arithmetic progressionï¼Œ from 1 to 34
ax.set_xticks(np.linspace(1, 34, 34))
ax.set_yticks(np.linspace(0.85, 1, 4))

# Set the labels for the scales
ax.set_xticklabels(["5", "20", "35", "50", "65", "80", "95", "110", "125", "140", "155", "170", "185", "200", "215",
                    "230", "245", "260", "275", "290", "305", "320", "335", "350", "365", "380", "395", "410", "425",
                    "440", "455", "470", "485", "500", ], fontproperties="monospace", fontsize=12, rotation=10)
ax.set_yticklabels(["0.85", "0.90", "0.95", "1.0"])

# Set the decorations for the scales and labels
ax.tick_params(left=False,pad=8,direction="in",length=2,width=3,color="b",labelsize=12)
ax.tick_params("x",labelrotation=10)

# Set the labels for x and y
ax.set_xlabel("Epochs", fontsize = 16)
ax.set_ylabel("Cos Similarity", fontsize = 16)

# Set the title
ax.set_title("Figure for Epochs and Cosine Similarities", fontsize=18,backgroundcolor='#F8CECC',
             fontweight='bold',color='black',verticalalignment="baseline")

# Set the spines
ax.spines["left"].set_color("darkblue")
ax.spines["bottom"].set_linewidth(2)

ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)

# Set the annotations
#ax.annotate(s="Max:0.960398",xy=(17,0.94),xytext=(17.2,0.87),arrowprops=dict(facecolor="g",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)
#ax.annotate(s="Min:0.421085",xy=(1,0.4),xytext=(1.2,0.33),arrowprops=dict(facecolor="b",shrink=0.05,headwidth=12,
#                                                                          headlength=6, width=4),fontsize=12)

# Set the legend
ax.legend(loc=3,labelspacing=1,handlelength=3,fontsize=14,shadow=True)

plt.show()